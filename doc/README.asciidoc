Widgets
=======

There are several key design points that make this library a bit different than
the mainstream libraries but apart from that it's a just widget library,
nothing too unexpected here.

One of the major differencies is that widgets are represented by C structures
that store the widget state, read only access could be done just by accessing
the structure members. If you want to change the state you call helper function
that changes it, it may also do sanity checks, and marks the widget to be
repainted. Setting values may also invoke `on_event()` allback, e.g. if you
change checkbox value the application will receive an event.

Another interesting point is that the library uncouples the GUI layout from the
actual application functionality. As a matter of a fact the layout can be
expressed in JSON and loaded from a file. It does not matter where the GUI
elements are put as far as the `on_event()` callbacks and widgets `uid` match.
An link:../examples/login/[example code] is worth of thousands words.

Widget structure
----------------

Widget type and payload
~~~~~~~~~~~~~~~~~~~~~~~

Each widget is represented by a `gp_widget` structure that implements common
functionality for all widgets and among others has the `type` memeber that is
n enum of all implemented widget types. This is commonly used to distinguish
the type of widget we are working with and also for sanity checks.

The more interesting part of the structure is the payload, which points to a
actual widget structure and is an anonymous enum of all implemented widget
structures so you can do `widget->tbox->buf` instead of
`((struct gp_widget_text_box)*widget->payload)->buf`. Which also means that
you has to be sure of which type of widget you are working with.

Alignment and fill
~~~~~~~~~~~~~~~~~~

Another common functionality implemented in widget structure is alignment and
fill. In order to explain these we have to introduce how widgets are structured
in an layout.

The widgets are organized in a two dimensional tree where each widget/layer is
an rectangle in a plane. The rectanles on a given tree layer are distinct and
the rectanle on an upper layer contains all rectangles on lower layer.

The widget layout is computed in two steps, first minimal size is computed
recursively from the top level widget down to the leaf widgets, then if the
window is bigger than the minimal needed size, the leftover space is being
distributed between the widgets.

In order for a widget to take more space than the minimal size, i.e. be
resizable the horizontal and/or vertical alignment has to be set to fill. Which
especially means that layout can be resized only and only if the top level
layout widget is resizable. Apart from fill each widget can be set to be
positioned top/center/bottom vertically as well as left/center/right
horizontally.

Examples
~~~~~~~~

Grid horizontal and vertical alignment set to fill button to center.

image:grid_fill_button_center.png[Grid set to fill button to center]

.Widget layout in JSON
[source,json]
-------------------------------------------------------------------------------
{
 "align": "fill",
 "widgets": [
  {
   "type": "button",
   "label": "Button",
   "on_event": "on_event",
   "align": "center"
  }
 ]
}
-------------------------------------------------------------------------------

Horizontal and vertical alignment set to fill for both.

image:grid_fill_button_fill.png[Both grid and button set to fill]

.Widget layout in JSON
[source,json]
-------------------------------------------------------------------------------
{
 "align": "fill",
 "widgets": [
  {
   "type": "button",
   "label": "Button",
   "on_event": "on_event",
   "align": "fill"
  }
 ]
}
-------------------------------------------------------------------------------

Horizontal and vertical alignment set to center for grid, button alignment does
not matter in this case.

image:grid_center_button.png[Grid set to center]

.Widget layout in JSON
[source,json]
-------------------------------------------------------------------------------
{
 "align": "center",
 "widgets": [
  {
   "type": "button",
   "label": "Button",
   "on_event": "on_event",
  }
 ]
}
-------------------------------------------------------------------------------

Widgets
-------

.Widget JSON attributes
[cols=",,,3",options="header"]
|==============================================================================
| Attribute |  Type  | Default  | Description
|  +uid+    | string |          | Widget universal id
|  +align+  |  enum  | +center+ | Sets both +haling+ and +valign+ {+center+, +fill+}
|  +haling+ |  enum  | +center+ | Horizontal alignment {+center+, +left+, +right+, +fill+}
|  +valing+ |  enum  | +center+ | Vertical alignment {+center+, +top+, +bottom+, +fill+}
|==============================================================================


Label widget
~~~~~~~~~~~~

Label widget is just a piece of text.

The `struct gp_widget_label` can be accessed as `widget->label`.

The widget size can either fit to the text passed to it on initialization or
can be set to hold size characters, note that for proportional fonts this would
be measured as size multiplied by maximal character width.

In case that widget was created with non-zero width parameter the text is
always stored internally in the widget!

image:label.png[Label widget]

.Label JSON attributes
[cols=",,,3",options="header"]
|===================================================
| Attribute |  Type  | Default | Description
|  +label+  | string |         | Label text
|  +bold+   |  bool  | +false+ | Bold text attribute
|===================================================

Button widget
~~~~~~~~~~~~~

Button is a button with a label.

Button is one of the boolean widgets the `struct gp_widget_bool` can be accessed as `widget->btn`.

image:button.png[Button widget]

.Button JSON attributes
[cols=",,,3",options="header"]
|===================================================
| Attribute |  Type  | Default | Description
|  +label+  | string |         | Button label
|===================================================

.Button widget events
[cols=",3",options="header"]
|===================================================
| Event name | Description
|   ACTION   | Emitted on button press.
|===================================================

Grid widget
~~~~~~~~~~~

By far the most complex widget is the grid widget which is basically a table to
organize widgets.

Grid widget distributes the space evenly, i.e. all cells in a given row have
the same height as well as all cells in a given column have the same width. The
grid can have border around it and padding between cells. The border and
padding consists of a constant part called padd and resizable part called fill.
The constant padding is accounted for in the grid widget minimal size, while
the resizable fill is accounted for when leftover space is being distributed.

image:grid.png[Grid widget]

.Grid JSON attributes
[cols=",,,3",options="header"]
|==============================================================================
| Attribute |  Type  | Default  | Description
|  +cols+   |  uint  |   +1+    | Number of columns
|  +rows+   |  uint  |   +1+    | Number of rows
|  +border+ | string |  +all+   | Border one of +horiz+, +vert+, +none+, +all+.
|  +cpad+   | string | all +1+  | Horizontal border and padding size multiples.
|  +rpad+   | string | all +1+  | Vertical border and padding size multiples.
|  +cpadf+  | string | all +0+  | Horizontal border and padding fill coeficients.
|  +rpadf+  | string | all +0+  | Vertical border and padding fill coeficients.
|  +cfill+  | string | all +1+  | Horizontal cell fill coeficients.
|  +rfill+  | string | all +1+  | Vertical cell fill coeficients.
|  +padd+   |  uint  |   +1+    | Horizontal and vertical padding size multiples.
| +widgets+ |  json  |          | +cols+ * +rows+ widgets.
|==============================================================================

Padding and fill string
^^^^^^^^^^^^^^^^^^^^^^^

* Numbers are divided with comma (,)
* Repetition can be done with number and asterisk (*)

For example "1, 1, 1" is the same as "3 * 1"
